wandb_project: tinystories-1m-play
wandb_run_name: null
wandb_run_name_prefix: ""

seed: 0
tlens_model_name: roneneldan/TinyStories-1M
tlens_model_path: null

n_samples: 400_000
save_every_n_samples: null
eval_every_n_samples: 40_000
eval_n_samples: 500
log_every_n_grad_steps: 20
collect_act_frequency_every_n_samples: 40_000
act_frequency_n_tokens: 500_000
batch_size: 8
effective_batch_size: 16  # Number of samples before each optimizer step
lr: 5e-4
lr_schedule: cosine
min_lr_factor: 0.1  # Minimum learning rate as a fraction of the initial learning rate
warmup_samples: 20_000  # Linear warmup over this many samples
max_grad_norm: 10.0  # Gradient norms get clipped to this value before optimizer steps

loss:
  # Note that "original acts" below refers to the activations in a model without SAEs
  sparsity:
    p_norm: 0.0
    initial_coeff: 0.1
    final_coeff: 0.1
    coeff_annealing_schedule: linear
  in_to_orig:
    # Used for e2e+recon. Positions in which to calculate the MSE between the activations of the
    # model with SAEs and the original model
    hook_positions:
      - blocks.5.hook_resid_pre
      - blocks.6.hook_resid_pre
      - blocks.7.hook_resid_pre
    total_coeff: 2.5  # Coefficient for the above MSE loss. Is split evenly between all hook_positions
  out_to_orig: null  # Not commonly used. MSE between the output of the SAE and original acts
  out_to_in:
    # Multiplies the MSE between the output and input of the SAE. Setting to 0 lets us track this
    # loss during training without optimizing it
    coeff: 0.0
  logits_kl:
    coeff: 0.5  # Multiplies the KL divergence between the logits of the SAE model and original model
train_data:
  dataset_name: apollo-research/roneneldan-TinyStories-tokenizer-gpt2
  is_tokenized: true
  tokenizer_name: gpt2
  streaming: true
  split: train
  n_ctx: 512
eval_data:
  dataset_name: apollo-research/roneneldan-TinyStories-tokenizer-gpt2
  is_tokenized: true
  tokenizer_name: gpt2
  streaming: true
  split: validation
  n_ctx: 512
saes:
  retrain_saes: false  # Determines whether to continue training the SAEs in pretrained_sae_paths
  pretrained_sae_paths: null  # Path or paths to pretrained SAEs
  sae_positions:  # Position or positions to place SAEs in the model
    - blocks.4.hook_resid_pre
  dict_size_to_input_ratio: 50.0  # Size of the dictionary relative to the activations at the SAE positions
  initial_beta: 5.0
  final_beta: 0.1
  hard_concrete_stretch_limits: [-0.1, 1.1]
